{"version":3,"sources":["components/App.js","reportWebVitals.js","index.js"],"names":["App","useState","time","setTime","timerOn","setTimerOn","inputValue","setInputValue","showTask","setShowTask","task","setTask","useEffect","interval","setInterval","prevTime","clearInterval","className","type","placeholder","value","onChange","e","target","onClick","id","Math","floor","slice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAsEeA,EAnEH,WAAO,IAAD,EACQC,mBAAS,GADjB,mBACTC,EADS,KACHC,EADG,OAEcF,oBAAS,GAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGoBJ,mBAAS,IAH7B,mBAGTK,EAHS,KAGGC,EAHH,OAIgBN,oBAAS,GAJzB,mBAITO,EAJS,KAICC,EAJD,OAKQR,mBAAS,IALjB,mBAKTS,EALS,KAKHC,EALG,KAkChB,OAfAC,qBAAU,WACR,IAAIC,EAAW,KAUf,OARIT,EACFS,EAAWC,aAAY,WACrBX,GAAQ,SAACY,GAAD,OAAcA,EAAW,SAChC,KACOX,GACVY,cAAcH,GAGT,kBAAMG,cAAcH,MAC1B,CAACT,IAIF,sBAAKa,UAAU,SAAf,UACE,6CACA,sBAAKA,UAAU,QAAf,UACA,uBAAOC,KAAK,OAAOC,YAAY,2BAA2BC,MAAOd,EAAYe,SA/B7D,SAACC,GACnBf,EAAce,EAAEC,OAAOH,UA+BrB,wBAAQF,KAAK,SAASM,QAAS,kBA3BjCb,EAAQL,GACRG,GAAY,QACZF,EAAc,KAyBZ,yBAEA,sBAAKkB,GAAG,UAAR,UAEE,kCAAQ,IAAMC,KAAKC,MAAOzB,EAAO,OAAW0B,OAAO,GAAnD,OACA,kCAAQ,IAAMF,KAAKC,MAAOzB,EAAO,IAAS,KAAK0B,OAAO,GAAtD,OACA,gCAAQ,IAAMF,KAAKC,MAAOzB,EAAO,IAAQ,KAAK0B,OAAO,QAGvD,sBAAKH,GAAG,UAAR,WACIrB,GAAoB,IAATF,GACX,wBAAQuB,GAAG,QAAQD,QAAS,kBAAMnB,GAAW,IAA7C,mBAEDD,GAAW,wBAAQoB,QAAS,kBAAMnB,GAAW,IAAlC,mBACVD,GAAWF,EAAO,GAClB,wBAAQsB,QAAS,kBAAMrB,EAAQ,IAA/B,oBAEAC,GAAWF,EAAO,GAClB,wBAAQsB,QAAS,kBAAMnB,GAAW,IAAlC,oBAGEG,GAAY,iDAAoBE,YCnD7BmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"js/main.312173bc.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport '../App.css';\n\nconst App = () => {\n  const [time, setTime] = useState(0);\n  const [timerOn, setTimerOn] = useState(false);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [showTask, setShowTask] = useState(false);\n  const [task, setTask] = useState(\"\");\n\n  const handleInput = (e) => {\n    setInputValue(e.target.value);  \n  }\n\n  const handleTask = () => {\n    setTask(inputValue)\n    setShowTask(true)\n    setInputValue(\"\")\n\n  }\n\n\n  useEffect(() => {\n    let interval = null;\n\n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime((prevTime) => prevTime + 1000);\n      }, 1000);\n    } else if (!timerOn) {\n      clearInterval(interval);\n    }\n\n    return () => clearInterval(interval);\n  }, [timerOn]);\n\n\n  return (\n    <div className=\"timers\">\n      <h1>TimeTracker</h1>\n      <div className=\"focus\">\n      <input type=\"text\" placeholder=\"What are you working on?\" value={inputValue} onChange={handleInput}/>\n      <button type=\"submit\" onClick={() => handleTask()}>Add task</button>\n      </div>\n      <div id=\"display\">\n           {/* add zero, than slice, for formatting */}\n        <span>{(\"0\" + Math.floor((time / 3600000))).slice(-1)}:</span>\n        <span>{(\"0\" + Math.floor((time / 60000) % 60)).slice(-2)}:</span>\n        <span>{(\"0\" + Math.floor((time / 1000) % 60)).slice(-2)}</span>\n      </div>\n\n      <div id=\"buttons\">\n        {!timerOn && time === 0 && (\n          <button id=\"start\" onClick={() => setTimerOn(true)}>Start</button>\n        )}\n        {timerOn && <button onClick={() => setTimerOn(false)}>Stop</button>}\n        {!timerOn && time > 0 && (\n          <button onClick={() => setTime(0)}>Reset</button>\n        )}\n        {!timerOn && time > 0 && (\n          <button onClick={() => setTimerOn(true)}>Resume</button>\n        )}\n\n          { showTask && <h3>Current focus: {task}</h3> }\n\n      </div>\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}