{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","time","setTime","timerOn","setTimerOn","taskName","setTaskName","useEffect","interval","setInterval","prevTime","clearInterval","className","id","type","placeholder","value","onChange","e","target","Math","floor","slice","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAoDeA,EAjDH,WAAO,IAAD,EACQC,mBAAS,GADjB,mBACTC,EADS,KACHC,EADG,OAEcF,oBAAS,GAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGgBJ,qBAHhB,mBAGTK,EAHS,KAGCC,EAHD,OAI8BN,qBAJ9B,6BAqBhB,OAfAO,qBAAU,WACR,IAAIC,EAAW,KAUf,OARIL,EACFK,EAAWC,aAAY,WACrBP,GAAQ,SAACQ,GAAD,OAAcA,EAAW,SAChC,KACOP,GACVQ,cAAcH,GAGT,kBAAMG,cAAcH,MAC1B,CAACL,IAIF,sBAAKS,UAAU,SAAf,UACE,6CACCP,GAAY,wCAAWA,EAAX,OACb,sBAAKQ,GAAG,UAAR,UACA,uBAAOC,KAAK,OAAOC,YAAY,2BAA2BC,MAAOX,EAAUY,SAAU,SAAAC,GAAC,OAAIZ,EAAYY,EAAEC,OAAOH,UAE7G,kCAAQ,IAAMI,KAAKC,MAAOpB,EAAO,OAAWqB,OAAO,GAAnD,OACA,kCAAQ,IAAMF,KAAKC,MAAOpB,EAAO,IAAS,KAAKqB,OAAO,GAAtD,OACA,gCAAQ,IAAMF,KAAKC,MAAOpB,EAAO,IAAQ,KAAKqB,OAAO,QAGvD,sBAAKT,GAAG,UAAR,WACIV,GAAoB,IAATF,GACX,wBAAQsB,QAAS,kBAAMnB,GAAW,IAAlC,mBAEDD,GAAW,wBAAQoB,QAAS,kBAAMnB,GAAW,IAAlC,mBACVD,GAAWF,EAAO,GAClB,wBAAQsB,QAAS,kBAAMrB,EAAQ,IAA/B,oBAEAC,GAAWF,EAAO,GAClB,wBAAQsB,QAAS,kBAAMnB,GAAW,IAAlC,2BCjCKoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"js/main.3194367f.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport './App.css'\n\nconst App = () => {\n  const [time, setTime] = useState(0);\n  const [timerOn, setTimerOn] = useState(false);\n  const [taskName, setTaskName] = useState()\n  const [taskDescription, setTaskDescription] = useState()\n\n  useEffect(() => {\n    let interval = null;\n\n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime((prevTime) => prevTime + 1000);\n      }, 1000);\n    } else if (!timerOn) {\n      clearInterval(interval);\n    }\n\n    return () => clearInterval(interval);\n  }, [timerOn]);\n\n\n  return (\n    <div className=\"Timers\">\n      <h2>TimeTracker</h2>\n      {taskName && <h2>Task: {taskName} </h2>}\n      <div id=\"display\">\n      <input type=\"text\" placeholder=\"What are you working on?\" value={taskName} onChange={e => setTaskName(e.target.value)}/>\n        {/* add zero, than slice, for formatting */}\n        <span>{(\"0\" + Math.floor((time / 3600000))).slice(-1)}:</span>\n        <span>{(\"0\" + Math.floor((time / 60000) % 60)).slice(-2)}:</span>\n        <span>{(\"0\" + Math.floor((time / 1000) % 60)).slice(-2)}</span>\n      </div>\n\n      <div id=\"buttons\">\n        {!timerOn && time === 0 && (\n          <button onClick={() => setTimerOn(true)}>Start</button>\n        )}\n        {timerOn && <button onClick={() => setTimerOn(false)}>Stop</button>}\n        {!timerOn && time > 0 && (\n          <button onClick={() => setTime(0)}>Reset</button>\n        )}\n        {!timerOn && time > 0 && (\n          <button onClick={() => setTimerOn(true)}>Resume</button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}